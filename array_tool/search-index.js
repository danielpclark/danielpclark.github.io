var searchIndex = {};
searchIndex["array_tool"] = {"doc":"Array Tool","items":[[5,"uniques","array_tool","Get `uniques` from two vectors",null,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"vec","","Array Tool provides many useful methods for vectors",null,null],[8,"Uniq","array_tool::vec","Several different methods for getting, or evaluating, uniqueness.",null,null],[10,"uniq","","`uniq` returns a vector of unique values within itself as compared to the other vector which is provided as an input parameter.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"unique","","`unique` removes duplicates from within the vector and returns Self.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_unique","","`is_unique` returns boolean value on whether all values within Self are unique.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"uniq_via","","`uniq_via` returns a vector of unique values within itself as compared to the other vector which is provided as an input parameter, as defined by a provided custom comparator.",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"unique_via","","`unique_via` removes duplicates, as defined by a provided custom comparator, from within the vector and returns Self.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"is_unique_via","","`is_unique_via` returns boolean value on whether all values within Self are unique, as defined by a provided custom comparator.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[8,"Shift","","Removes, or Adds, the first element of self.",null,null],[10,"shift","","Removes and returns the first item from the vector",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unshift","","Insert item at the beginning of the vector.  No return value.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"Intersect","","Set Intersection â€” Returns a new array containing elements common to the two arrays, excluding any duplicates. The order is preserved from the original array.",null,null],[10,"intersect","","Example ``` use array_tool::vec::Intersect;",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"intersect_if","","Example ``` # use std::ascii::AsciiExt; use array_tool::vec::Intersect;",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[8,"Join","","Join vector of ToString capable things to a String with given delimiter.",null,null],[10,"join","","Example ``` use array_tool::vec::Join;",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[8,"Times","","Expand and duplicate the vectors content `times` the integer given",null,null],[10,"times","","Example ``` use array_tool::vec::Times;",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[8,"Union","","Create a `union` between two vectors. Returns a new vector by joining with other, excluding any duplicates and preserving the order from the original vector.",null,null],[10,"union","","Example ``` use array_tool::vec::Union;",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"string","array_tool","A string is a collection so we should have more methods for handling strings. ",null,null],[3,"GraphemeBytesIter","array_tool::string","A grapheme iterator that produces the bytes for each grapheme.",null,null],[8,"ToGraphemeBytesIter","","ToGraphemeBytesIter - create an iterator to return bytes for each grapheme in a string.",null,null],[10,"grapheme_bytes_iter","","Returns a GraphemeBytesIter which you may iterate over.",6,{"inputs":[{"name":"self"}],"output":{"name":"graphemebytesiter"}}],[8,"Squeeze","","Squeeze - squeezes duplicate characters down to one each",null,null],[10,"squeeze","","Example ``` use array_tool::string::Squeeze;",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[8,"Justify","","Justify - expand line to given width.",null,null],[10,"justify_line","","Example ``` use array_tool::string::Justify;",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[8,"SubstMarks","","Substitute string character for each index given.",null,null],[10,"subst_marks","","Example ``` use array_tool::string::SubstMarks;",9,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"str"}],"output":{"name":"string"}}],[8,"AfterWhitespace","","After whitespace",null,null],[10,"seek_end_of_whitespace","","Given offset method will seek from there to end of string to find the first non white space.  Resulting value is counted from offset.",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[8,"WordWrap","","Word wrapping",null,null],[10,"word_wrap","","White space is treated as valid content and new lines will only be swapped in for  the last white space character at the end of the given width.  White space may reach beyond  the width you've provided.  You will need to trim end of lines in your own output (e.g.  splitting string at each new line and printing the line with trim_right).  Or just trust  that lines that are beyond the width are just white space and only print the width -  ignoring tailing white space.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new grapheme iterator from a string source.",12,{"inputs":[{"name":"str"}],"output":{"name":"graphemebytesiter"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"Uniq"],[8,"Shift"],[8,"Intersect"],[8,"Join"],[8,"Times"],[8,"Union"],[8,"ToGraphemeBytesIter"],[8,"Squeeze"],[8,"Justify"],[8,"SubstMarks"],[8,"AfterWhitespace"],[8,"WordWrap"],[3,"GraphemeBytesIter"]]};
initSearch(searchIndex);
